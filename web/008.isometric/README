An isometric projection is a 3D-2D projection that does not have "perspective"
(more distant objects appearing closer together). It is implemented like this:

The points of your object are (x,y,z) coordinates.  The isometric projection
uses two constants (alpha and beta) which are commonly chosen to both be 30
degrees. 

  \               //
   \            //
    \         //
     \      //
      \   //
  beta \// alpha
----------------------

Then, each (x,y,z) point of the object is projected as if the right line was
the x axis and the left line were the y axis; the point's z coordinate is then 
simply added to the vertical axis to get its final u,v position in planar space.

Note that in the matrix below 3D points are transformed into 2D points by virtue
of the resulting z-coordinate always being zero.

 --                       --
|cos(alpha)   -cos(beta)   0|
|sin(alpha)    sin(beta)   1|
|   0             0        0|
 --                       --

Example
---------
Suppose there are two "object" points. We'll represent them as column vectors,

  --  --
 |x1  x2|
 |y1  y2|
 |z1  z2|
  --  --

To produce the transformed u,v coordinates from these, multiply the former
matrix by the column vectors,

 --                       --   -  -    --                               --
|cos(alpha)   -cos(beta)   0| | x1 |   | x1*cos(alpha) - y1*cos(beta) + 0 |
|sin(alpha)    sin(beta)   1| | y1 | = | x1*sin(alpha) + y1*sin(beta) + z1|
|   0             0        0| | z1 |   | 0                                |
 --                       --   -  -    --                               --

So we see that (u,v) is the resulting column vector on the right. If we had 
a lot of these points we could put them all in one matrix (each point being
a column vector), and after one matrix multiplication we'd have all their 
(u,v) counterparts in the final matrix product.

Note that the final (u,v) coordinates should be translated to fit the screen.

EXAMPLE
-------
The following Octave/Matlab program generates a planar x,y,z grid of 
100 points (z==0 for all points). Then it applies an isometric projection and
plots the resulting u,v grid. Notice that negative parts of both axes 
include data thus the final u,v point set needs to be translated if this is
to be used for, say, presentation in an SVG window.

% run using octave --persist iso.m
a = 30;
b = 30;
ISO = [ cos(a) -cos(b) 0; sin(a) sin(b) 1; 0 0 0 ];
m = zeros(3,100);
pos=1;
for i = 1:10
 for j = 1:10
  m(1,pos) = i;
  m(2,pos) = j;
  pos = pos + 1;
 end
end
PROJ = ISO * m;
x = m(1,:);
y = m(2,:);
%scatter(x,y);
xp = PROJ(1,:);
yp = PROJ(2,:);
scatter(xp,yp);

