Geometry notes for drawing hexagons
-----------------------------------
Troy D. Hanson
July, 2014

I once wrote a program to draw some hexagons. After re-learning some
high school trig (thanks, teachers!) I wrote these notes to remember
the technique.

You can draw a hexagon by hand by drawing a rectangle "1 unit" high
and about twice as wide (1.7 units). Then give it a triangular hat 
whose height is half that of the rectangle. Put a reflection of the
hat below the rectangle.

To do that in a computer program we need a drawing system and some 
vertices. For extra credit we'll then invent a coordinate system to
refer to any hexagon in a planar hexagonal tile.

Vertices
--------
Assume an xy drawing plane with +x and +y going right and down.
In other words a drawing plane that has 0,0 at the top left with
increasing x,y going down and to the right. The HTML5 canvas has
this coordinate system.

I'll list the six vertices in clockwise order, starting from the
left-most upper one. In other words if the hexagon is oriented with
its peaky points straight up and down, my 0,0 vertex (or initial vertex) 
is shown here along with the clockwise order of vertices:

          x               2  
-0,0-->  x x             1 3        
         x x             6 4        
          x               5        

The six vertices listed in this order are:

 0,0
 sqrt(3)/2, -(1/2)
 sqrt(3),0
 sqrt(3),1
 sqrt(3)/2, 3/2
 0,1

Derivation
============================================================================
To find the hexagon's vertices in an xy coordinate system, we can draw a unit
hexagon, then use knowledge of its edges (all 1 unit) and its interior angles
(all 120 degrees) then use some triangle math to figure out the exact relative
positions of each vertex.

We know the six angles inside the hexagon (angles between adjacent sides)
are each 120 degrees. (I had to look it up, but the rule for the interior
angle of any regular n-gon is (n-2) × 180° / n).  To find the hexagon's
vertices, take a triangle - we'll take the one formed by the bottom three
vertices of the hexagon, and work out the points. (Afterward the remaining
hexagon vertices are relatively obvious from the unit edges and the mirror
image of the bottom triangle). Here's the bottom triangle of the hexagon.

         x x             6 4        
          x               5        
      
This one does not have a right angle in it. We want a triangle with a right
angle in it so we can use "sohcahtoa" (thank you, again my high school trig
teacher). Since this triangle is left-right symmetrical, take its left half. 
In other words, discard vertex 4; replace it with a vertex at the midpoint
from (6-4).  Now we have a new triangle with a right angle at that position
(labeled dot below).

         x.              6.        
          x               5        
      
We ultimately want to get the horizontal (x) distance between 6-5, and the
vertical (y) distance between 6-5 so we can put a xy coordinate on each vertex.
Here x and y are the length of the triangle's two sides other than the hypotenuse.

We first need to know the three angles of this triangle: one is the 90-degree
right angle, and the other two angles are:
 
The angle at vertex 5: since the original angle 
 (between the adjacent sides of the hexagon connected there) was 120, the half
 triangle we just made has a 60 degree angle between the vertical
 line rising from vertex 5 and the edge (5-6). 

The angle at vertex 6: using the triangle rule about angles add to 180 
 we now know the angle at vertex 6 is 30 degrees. That's the angle between the 
 horizontal line extending right from vertex 6, and the 5-6 hypotenuse below.

Now we use trig: to get the vertical y distance between 6-5, we use the "soh" 
part of sohcahtoa: sin(30)=y/1 (thus y=1/2); y is the vertical component of
distance between 6 and 5, or to say it another way, the distance the bottom
peak of the hexagon hangs below the adjacent two vertices.  

To get the horizontal x distance between 5-6, use trig again with the "cah"
part of sohcahtoa. cos(30)=x/1 (thus x=sqrt(3)/2); x is the horizontal
distance that the peak is from the left or right of the hexagon.  Since the
peak is in the horizontal middle, the total hexagonal width is simply twice
that, sqrt(3).

Incidentally the denominator of 1 above comes from the length of the 
hypotenuse (the edge from 5-6), which is 1 because this is a unit hexagon.

Last is just to make a diagram of a unit hexagon, and fill in the vertex
coordinates.

          x               2  
-0,0-->  x x             1 3        
         x x             6 4        
          x               5        

Since we put vertex 1 at (0,0), and this is a unit hexagon, we know that
vertex 6 is at (0,1). Vertex 3 and 4 are simply translated right by the
hexagon width, sqrt(3). Vertex 2 and 5 are in-between them horizontally
and 1/2 unit above and below. That gave us the coordinates above.

============================================================================

Extra credit: a coordinate system for a hexagonal tiling of the plane
---------------------------------------------------------------------

If you've seen the floor of a subway station made of hexagon tiles, you
have seen a planar tiling of hexagons. They fit together perfectly with
every successive row being offset by half a hexagon width. In other words
the peaks of one row sit in the recess between hexagons in the row above.

If we call one of the hexagons the "origin" (0,0), how can we map coordinates
to all the other hexagons on the plane? (If we simply identified every hexagon
by its initial vertex, we'd have a unique way to refer to every hexagon; but 
only certain (x,y) values would be legitimate; blech). I want a real mapping
where every x,y refer to a unique hexagon. Conceptually we can forget the
hexagons and consider a cinder block wall; rectangles offset in alternating
rows. If you label one block (0,0), do the two offset blocks below it both
differ from the original block in their x coordinates? (Since both are offset
in the x-direction from the original?) No, because if the coordinates of those
blocks below both differ in x from the original block (0,0), then (0,1) is
undefined and only (-1,1) and (1,1) have meaning. We want _every_ integer pair
to define (uniquely identify) a hexagon. We also want a simple rule to find the
neighbors for any hexagon, in this coordinate system.

For the y-part of the coordinate system, things are the usual: vertical neighbors
just differ by one in their y coordinate. But vertical neighbors are offset
horizontally from each other (the cinder block wall); we choose to define
the x component of this diagonal relationship based on a rule.

My rule is that for an odd-y hexagon, its vertical neighbors to the west share
its x-coordinate; and its vertical neighbors to the east have its x+1. Implied
is the reverse rule: for an even-y hexagon, vertical westward neighbors
have its x-1, and vertical eastward neigbhors share its x.

This is the resulting map from any hexagon to its six 'compass' neighbors,
based on whether the hexagon has an even or odd y coordinate.

      odd-y:       even-y
   ============   ========
     e: +1, 0      +1, 0
    ne: +1,-1       0,-1
    nw:  0,-1      -1,-1
     w: -1, 0      -1, 0
    sw:  0,+1      -1,+1
    se: +1,+1       0,+1

This gives us everything we want: a mapping from every integer pair to every hexagon
in the plane, with a meaningful geometric relationship in the coordinate system.
For the purposes of drawing select hexagons on the planar hexagonal tiling, I
call these Hextile Coordinates as distinct from the Drawing Coordinates.

Conversion of Hextile Coordinates to Drawing Coordinates
---------------------------------------------------------------------
Every Hextile coordinate (x,y) identifies one hexagon in a planar tiling. To
get the Drawing coordinates (dx, dy) (defined as the canvas coordinate for the
hexagon's initial vertex), scale the Hextile coordinate (for dx by the hexagon
width, sq3, or for dy by its height as measured from the initial vertex to the
next initial vertex, 3/2); also translate alternating rows' dx to produce a
horizontal shift of half a hexagon width, sq3/2) so they tile properly. (Let sq3
be the square root of 3).

  dx = sq3*x + (y%2)*(sq3/2)
  dy = (3/2)*y

Scaling and Translating
~~~~~~~~~~~~~~~~~~~~~~~
This drawing translation has an implied scale factor of 1, which means each
edge of the unit hexagon would be "one pixel long" if drawn on a canvas.

To scale the hexagons up by a factor s, multiply dx and dy times s to position
the initial vertex. Then, when drawing the hexagon's edges, multiply each 
x and y component to the next vertex by the same scaling factor.

A translation xo/yo can be added to every vertex for a global translation effect.

Gapped hexagons
~~~~~~~~~~~~~~~
Sometimes e.g. in HTML canvas we like to draw the hexagons with little gaps
between them so they look more distinct from each other (sort of like the grout
in the subway tiles). To do this, compute each hexagon's initial vertex
according to the global scale factor- this defines the hexagonal "turf" that
hexagon alone occupies; but tweak the scale factor smaller when drawing the six
edges. This will "tighten up" the hexagon so it occupies a slightly smaller
portion of its turf. This creates gaps between neighboring hexagons.

Implementation
~~~~~~~~~~~~~~
See static/core.js for a sample implementation of drawing gapped hexagons. 
To try it run "node canvas.js" and browse to localhost:9000.
