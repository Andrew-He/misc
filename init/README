Starting jobs at boot
---------------------
Starting jobs at system boot is generally platform specific. RHEL and CentOS use
a traditional "sysvinit" mechanism, Ubuntu (at least since 10.x) uses "upstart",
and Mac OS X uses "launchd". They are all featureful in their own ways. Here we
are only concerned with the minimum needed to run a daemon at boot on each one.

.exampled: the daemon to run
For the purposes of illustration, suppose we have a daemon - we'll call it
"exampled" (for example daemon).  It will be installed in this path,

  /usr/local/bin/exampled

We assume that `exampled` runs in the foreground (it does not fork and exit)
for the purposes of the job configuration below.

RHEL/CentOS
~~~~~~~~~~~
This platform uses sysvinit-style scripts. 

Place this in `/etc/rc.d/init.d/exampled`:

----------------------------------------------------------------
#!/bin/sh
#
# exampled: sample daemon
#
# chkconfig:   2345 26 89
# description: example daemon

. /etc/rc.d/init.d/functions

start()
{
    echo -n $"Starting exampled: "
    daemon /usr/local/bin/exampled &
    touch /var/lock/subsys/exampled
    echo
}

stop()
{
    echo -n $"Shutting down exampled: "
    killproc exampled
    rm -f /var/lock/subsys/exampled
    echo
}

[ -f /usr/local/bin/exampled ] || exit 0

# see how we were called
case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  restart|reload)
        stop
        start
        ;;
  condrestart)
        [ -e /var/lock/subsys/exampled ] && (stop; start)
        ;;
  status)
        status exampled
        ;;
  *)
        echo $"Usage: $0 {start|stop|restart|reload|condrestart}"
        exit 1
esac

exit 0
----------------------------------------------------------------

Add the new script (internally this symlinks it to the various runlevels): 

  chkconfig --add exampled

This makes symlinks in the runlevel-specific directories.

Manually start up the job (on reboot, it should get started automatically):

  /etc/init.d/exampled start

Ubuntu 10+
~~~~~~~~~~
This platform uses "upstart" to manage jobs. 

Place this in `/etc/init/exampled.conf`:

----------------------------------------------------------------
  description "example daemon"
  start on filesystem
  stop on runlevel S
  respawn
  script
  exec /usr/local/bin/exampled
  end script
----------------------------------------------------------------

It's all ready to go. First time start up is just:

  start exampled

Mac OS X
~~~~~~~~
Mac uses "launchd" to start daemons. 

Place this file in `/Library/LaunchDaemons/exampled.plist`:

----------------------------------------------------------------
  <?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.appl.com/DTDs/PropertyList-1.0.dtd">
  <plist version="1.0">
  <dict>
    <key>Label</key>
    <string>exampled</string>
    <key>ProgramArguments</key>
    <array>
      <string>/usr/local/bin/exampled</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
  </dict>
  </plist>
----------------------------------------------------------------

Load it in like this:

  launchctl load /Library/LaunchDaemons/exampled.plist

Since we used the directive to start it upon load, it should already be running.

Distributing code for multiple platforms
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Normally it's easiest if you use the platform-specific package management system
to distribute code to users. That means, roll RPM's for RedHat/CentOS, roll deb
packages for Ubuntu, and for Mac ... well, there is no package manager but .dmg
files are the usual thing to hand out. (For a GUI app that is. Maybe for daemons
handing out a directory with an install script would be reasonable).
