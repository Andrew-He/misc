Starting jobs at boot
---------------------
Starting jobs at system boot is generally platform specific. RHEL and CentOS use
a traditional "sysvinit" mechanism, Ubuntu (at least since 10.x) uses "upstart",
and Mac OS X uses "launchd". They are all featureful in their own ways. Here we
are only concerned with the minimum needed to run a daemon at boot on each one.

.exampled: the daemon to run
For the purposes of illustration, suppose we have a daemon - we'll call it
"exampled" (for example daemon).  It will be installed in this path,

  /usr/bin/exampled

We assume that `exampled` runs in the foreground (it does not fork and exit)
for the purposes of the job configuration below.

RHEL/CentOS
~~~~~~~~~~~
This platform uses sysvinit-style scripts. 

Place this in `/etc/rc.d/init.d/exampled`:

----------------------------------------------------------------
include::centos-exampled[]
----------------------------------------------------------------

Add the new script (internally this symlinks it to the various runlevels): 

  chkconfig --add exampled

This makes symlinks in the runlevel-specific directories.

Manually start up the job (on reboot, it should get started automatically):

  /etc/init.d/exampled start

Ubuntu 10+
~~~~~~~~~~
This platform uses "upstart" to manage jobs. 

Place this in `/etc/init/exampled.conf`:

----------------------------------------------------------------
include::ubuntu-exampled.conf[]
----------------------------------------------------------------

It's all ready to go. First time start up is just:

  start exampled

Mac OS X
~~~~~~~~
Mac uses "launchd" to start daemons. 

Place this file in `/Library/LaunchDaemons/exampled.plist`:

----------------------------------------------------------------
include::mac-exampled.plist[]
----------------------------------------------------------------

Load it in like this:

  launchctl load /Library/LaunchDaemons/exampled.plist

Since we used the directive to start it upon load, it should already be running.

Distributing code for multiple platforms
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Normally it's easiest if you use the platform-specific package management system
to distribute code to users. That means, roll RPM's for RedHat/CentOS, roll deb
packages for Ubuntu, and for Mac ... well, there is no package manager but .dmg
files are the usual thing to hand out. (For a GUI app that is. Maybe for daemons
handing out a directory with an install script would be reasonable).
